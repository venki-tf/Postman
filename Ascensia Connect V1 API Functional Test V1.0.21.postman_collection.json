{
	"info": {
		"_postman_id": "7ee19496-30da-4b5d-b308-f388ad31ab90",
		"name": "Ascensia Connect V1 API Functional Test V1.0.21",
		"description": "This collection checks the Ascensia Connect V1 API service endpoints to ensure that the service responds to HTTP requests as described in the API documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01-User Authorization (/Authorize)",
			"item": [
				{
					"name": "01-1 Negative Tests",
					"item": [
						{
							"name": "01-1-01 User authorization request must fail if client_id is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: client_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration.",
											"disabled": true
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "If the authorization request does not include the \"client_id\" query parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: client_id\"\n}"
							},
							"response": [
								{
									"name": "01-00 Valid user authorization succeeds",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"{{ascensia_oauth_endpoint}}",
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "languagecode",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "countrycode",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Matched-Stub-Id",
											"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
											"name": "Matched-Stub-Id",
											"description": "Custom header"
										},
										{
											"key": "Server",
											"value": "Jetty(9.2.z-SNAPSHOT)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
								}
							]
						},
						{
							"name": "01-1-02 User authorization request must fail if response_type is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: response_type\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "If the authorization request does not include the \"response_type\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: response_type\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-03 User authorization request must fail if scope is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_scope(s)\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: scope\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request does not include the \"scope\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_scope(s)\",\n    \"error_description\": \"required parameter is missing: scope\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-04 User authorization request must fail if language_code is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: language_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request does not include the \"language_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: language_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-05 User authorization request must fail if language_code is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"invalid language_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_invalid_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_invalid_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes an unsupported or invalid \"language_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"invalid language_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-06 User authorization request must fail if country_code is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: country_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request does not include the \"country_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: country_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-07 User authorization request must fail if country_code is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"invalid country_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_invalid_countrycode}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_invalid_countrycode}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes an unsupported or invalid \"country_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"invalid country_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-08 User authorization request must fail if the scope is not 'Contour'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_scope(s)\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"requested scope(s) not registered\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_invalid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_invalid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes a \"scope\" query parameter with a value other than \"Contour\", the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_scope(s)\",\n    \"error_description\": \"requested scope(s) not registered\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-09 User authorization request must fail if client_id is not registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid client_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_unregistered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_unregistered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes a \"client_id\" query parameter value that is not registered, the service is expected to return a HTTP 400 Bad Request response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"invalid client_id\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-10 User authorization request must fail if the redirect_uri is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUST) with the expected JSON body\", function () {",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: redirect_uri\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration.",
											"disabled": true
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "01-1-11 User authorization request must fail if the response_type is not code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"unsupported_response_type\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"unsupported response_type parameter\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_invalid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_invalid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "01-1-12 User authorization request must fail for implict grant where the response_type is token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing or invalid: response_type\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type=token&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "token"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						}
					]
				},
				{
					"name": "01-2 Positive Tests",
					"item": [
						{
							"name": "01-2-01 User authorization request must succeed with valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
											"    pm.response.to.be.ok",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"    ",
											"    const cheerio = require('cheerio');",
											"    const $ = cheerio.load(responseBody);",
											"    ",
											"    // Extract request verification token",
											"    const sdk = require('postman-collection');",
											"    var actionUrl = new sdk.Url($('form').attr('action'));",
											"    ",
											"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
											"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
											"    var clientName = clientParameter.value;",
											"    pm.environment.set(\"ascensia_client_name\", clientName);",
											"    ",
											"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
											"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
											"    var requestId = requestIdParameter.value;",
											"    pm.environment.set(\"ascensia_request_id\", requestId);",
											"    ",
											"    // Extract request verification token",
											"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
											"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
											"    var requestVerificationToken = inputElement.val();",
											"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
											"});",
											"",
											"if (!pm.variables.get(\"ascensia_client_name\") ||",
											"    !pm.variables.get(\"ascensia_request_id\") ||",
											"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
											"        console.log(\"Skipping login request..\");",
											"        postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_client_name\");",
											"pm.environment.unset(\"ascensia_request_id\");",
											"pm.environment.unset(\"ascensia_request_verification_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "01-2-01 User authorization must succeed with valid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
											"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
											"        // Extract authorization code from JSON response.",
											"        pm.response.to.have.jsonBody();",
											"    ",
											"        var jsonResponse = pm.response.json();",
											"        ",
											"        // Handle Authorization Code parameter",
											"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
											"        var authorizationCode = jsonResponse.args.code;",
											"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"        ",
											"        // Handle ref_id  parameter",
											"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
											"        var referenceId = jsonResponse.args.reference_id;",
											"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"    } else {",
											"        // Handle the case the callback handler shows a temporary refresh page.",
											"        const cheerio = require('cheerio');",
											"        var $ = cheerio.load(responseBody);",
											"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
											"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
											"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
											"            pm.expect(err).to.be.null;",
											"            pm.expect(res).to.have.own.property('stream');",
											"            $ = cheerio.load(res.stream.toString('utf8'));",
											"            ",
											"            // Handle Authorization Code parameter",
											"            var authorizationCode = $('input[name=\"Code\"]').val();",
											"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"            // Handle ref_id  parameter",
											"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
											"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gemail",
											"value": "{{ascensia_user_login}}",
											"type": "text"
										},
										{
											"key": "gpassword",
											"value": "{{ascensia_user_password}}",
											"type": "text"
										},
										{
											"key": "__RequestVerificationToken",
											"value": "{{ascensia_request_verification_token}}",
											"type": "text"
										},
										{
											"key": "Scope",
											"value": "{{ascensia_valid_scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_service_base_url}}"
									],
									"path": [
										"Login",
										"Login"
									],
									"query": [
										{
											"key": "client",
											"value": "{{ascensia_client_name}}"
										},
										{
											"key": "requestId",
											"value": "{{ascensia_request_id}}"
										},
										{
											"key": "lang",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "Source",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								},
								"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
							},
							"response": []
						}
					]
				}
			],
			"description": "The user authorization endpoint can be used authorize the Ascensia Connect service to share a specific user's blood glucose data, other related data and profile data with approved thirdy party services such as CCM or Whisk. The tests in the folder verifies that the /Authorize endpoint responds to incoming authorization requests as described in the API documentation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02-Token Retrieval (/Token)",
			"item": [
				{
					"name": "02-1 Negative Tests",
					"item": [
						{
							"name": "02-1-01 Token request must fail if code is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: code\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"code\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: code\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-02 Token request must fail if client_id is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"client identifier(s) are invalid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"client_id\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"client identifier(s) are invalid.\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-03 Token request must fail if client_secret is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"client identifier(s) are invalid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"client_secret\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"client identifier(s) are invalid.\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-04 Token request must fail if grant_type is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: grant_type\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"grant_type\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: grant_type\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-05 Token request must fail if grant_type is neither authorization_code nor refresh_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"unsupported_grant_type\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid grant_type: \" + pm.variables.get(\"ascensia_invalid_grant_type\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_invalid_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the grant_type is neither \"authorization_code\" nor \"refresh_token\", the token request is expected fail with HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"unsupported_grant_type\",\n    \"error_description\": \"invalid grant_type: <grant_type>\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-06 Token request must fail if redirect_uri is missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: redirect_uri\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"redirect_uri\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: redirect_uri\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-07 Token request must fail if redirect_uri does not match registeration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Request Body\", pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_client\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid redirect_uri: \" + pm.variables.get('ascensia_invalid_redirect_uri'));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_invalid_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the redirect_uri does not match registered redirect_uri, then the token request is expected fail with HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_client\",\n    \"error_description\": \"invalid redirect_uri: <redirect_uri>\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-08 Token request must fail with invalid authorization code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_grant\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid authorization code\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_invalid_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the authorization is invalid or expired, then the token request is expected fail with HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_grant\",\n    \"error_description\": \"invalid authorization code\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-09 Token request must fail if client_id is unregistered",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is a json body with expected error values\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_client\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid client_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_unregistered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"client_id\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"client identifier(s) are invalid.\"\n}"
							},
							"response": []
						},
						{
							"name": "02-1-10 Token request must fail if client_secret does not registeration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"ascensia_authorization_code\", Math.random().toString(36).split('.')[1]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is a json body with expected error values\", function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_client\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid client_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_unregistered_client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_random_state}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								},
								"description": "If the token request does not include the \"client_id\" body parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"client identifier(s) are invalid.\"\n}"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST)\", function () {",
									"    pm.response.to.be.badRequest;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "02-2 Positive Tests",
					"item": [
						{
							"name": "02-2-1 Get Access Token is successful only  once with user autherization",
							"item": [
								{
									"name": "02-2-1-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
									},
									"response": []
								},
								{
									"name": "02-2-1-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										},
										"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
									},
									"response": []
								},
								{
									"name": "02-2-1-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    console.log(\"Access token will expire after \" + jsonResponse.expires_in + \"ms...\");",
													"    var expiryTime = new Date().getTime() + 1000 * jsonResponse.expires_in;",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "02-2-1-04 Get access_token request must fail if the same authorization code is used again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.BAD_REQUEST (400)\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_grant\");",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid authorization code\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "addTokenTo",
													"value": "queryParams",
													"type": "string"
												},
												{
													"key": "accessToken",
													"value": "droYnPOcepkng2gPyMLnVrx81IxyMH-0mK9r328sT2QSKONeiAvbRxCZsJAa_9SSWQ6x82i7P37KomqwNoUiw_1-0gt7vSzhb19a6zGBj_fsEZ9hp5A0AgQxCnBbWRb97kzaVOdZaVIV2P41oAtSR4VyUhavMi-9Ww778OUvn8GWdHIg0g6lb4uJ1H84ok7KE7UOKAprSHpfVJnS3ZCaPqGdZWkbZx4OytXjVrDomxo7IOP9poaPO2J7RirS4Z6GX9Z7vjT5E19DvL_ENtl0f4kuIpDLSXdNQjXq7IqgNy005rur",
													"type": "string"
												},
												{
													"key": "tokenType",
													"value": "bearer",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "02-2-2 Token can be refreshed repeatedly unless expired.",
							"item": [
								{
									"name": "02-2-2-01 Refresh token request must succeed before expiry time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_refresh_grant_type}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "02-2-2-02 Refresh token request must succeed before expiry time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_refresh_grant_type}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "02-2-2-03 Refresh token request must succeed after expiry time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let expiryTime = new Date(parseInt(pm.variables.get(\"ascensia_token_expiry_time\")));",
													"console.log(\"Waiting till \" + expiryTime + \" for token to expire...\");",
													"while (new Date() <= expiryTime);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_refresh_grant_type}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Once the user authorization is complete, the next step in the data request from Ascensia Connect is the access token retrieval using the Authorization code. This is a one-time process as it would also generate the refresh token which can be used for any new access token request.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03-Token Removal (/Revoke)",
			"item": [
				{
					"name": "03-1 Negative Tests",
					"item": [
						{
							"name": "03-1-01 Revoke token request without client_id must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'Invalid or missing client identifier(s)');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"disabled": true
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "{{access_token_type}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "03-1-02 Revoke token request without client_secret must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'Invalid or missing client identifier(s)');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "token_type_hint",
											"value": "{{access_token_type}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "03-1-03 Revoke token request without token_type_hint must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'Invalid or missing token');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "{{access_token_type}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "03-1-04 Revoke token request with wrong token_type_hint must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'token_type_hint must be either access_token or refresh_token.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "{{ascensia_invalid_grant_type}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "03-1-05 Revoke token request with wrong token must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'unsupported_token_type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "{{access_token_type}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "03-1-06 Revoke token request with unregistered client_id must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'unsupported_token_type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_unregistered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "{{access_token_type}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "03-1-07 Revoke token request with wrong client_secret must fail",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'unsupported_token_type');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_random_state}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "{{access_token_type}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "bad_{{ascensia_access_token}}_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Revoke"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "03-2 Positive Tests",
					"item": [
						{
							"name": "03-2-1 Revoke Token Using Access Token",
							"item": [
								{
									"name": "03-2-1-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
									},
									"response": []
								},
								{
									"name": "03-2-1-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										},
										"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
									},
									"response": []
								},
								{
									"name": "03-2-1-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-1-04 Revoke token request using access_token must succeed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('status', 200);",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('message', 'Access Revoked');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "{{access_token_type}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{ascensia_access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-1-05 Revoke token request using revoked access_token must fail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'unsupported_token_type');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "{{access_token_type}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{ascensia_access_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-1-06 Refresh token request after revoke must fail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'invalid_grant');",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error_description', 'invalid refresh token');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_refresh_grant_type}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-1-07 Get new access_token request after revoke token must fail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'invalid_grant');",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error_description', 'invalid authorization code');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "03-2-2 Revoke Token Using Refresh Token",
							"item": [
								{
									"name": "03-2-2-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "03-2-2-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-2-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-2-04 Revoke token request using refresh_token must succeed",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('status', 200);",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('message', 'Access Revoked');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "{{refresh_token_type}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-2-05 Revoke token request using revoked refresh_token must fail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'unsupported_token_type');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "{{refresh_token_type}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Revoke",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Revoke"
											]
										}
									},
									"response": []
								},
								{
									"name": "03-2-2-06 Refresh token request after revoke must fail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error', 'invalid_grant');",
													"    pm.expect(jsonResponse, \"Response\").to.have.own.property('error_description', 'invalid refresh token');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{ascensia_refresh_token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_refresh_grant_type}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "04-Blood Glucose Data Access (/getbgdata)",
			"item": [
				{
					"name": "04-1 Negative Tests",
					"item": [
						{
							"name": "04-1-01 Get blood glucose data request must fail without client_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "client_id",
										"value": "{{ascensia_registered_client_id}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ascensia_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-1-02 Get blood glucose data request must fail when client_id is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": ""
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-1-03 Get blood glucose data request must fail without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-1-04 Get blood glucose data request must fail when authorization is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "ClientID",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "ServiceName",
										"type": "text",
										"value": "getbgdata"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-1-05 Get blood glucose data request must fail if authorization data is not formatted correctly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Authorization denied for request. error code : Unauthorized\");",
											"});   ",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "foo bar fissy bar"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-1-06 Get blood glucose data request must fail if authorization type is not Bearer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Authorization denied for request. error code : Unauthorized\");",
											"    pm.environment.unset('ascensia_transaction_marker', '');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{ascensia_invalid_grant_type}} {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "04-2 Positive Tests",
					"item": [
						{
							"name": "04-2-01 User authorization request must succeed with valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
											"    pm.response.to.be.ok",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"    ",
											"    const cheerio = require('cheerio');",
											"    const $ = cheerio.load(responseBody);",
											"    ",
											"    // Extract request verification token",
											"    const sdk = require('postman-collection');",
											"    var actionUrl = new sdk.Url($('form').attr('action'));",
											"    ",
											"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
											"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
											"    var clientName = clientParameter.value;",
											"    pm.environment.set(\"ascensia_client_name\", clientName);",
											"    ",
											"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
											"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
											"    var requestId = requestIdParameter.value;",
											"    pm.environment.set(\"ascensia_request_id\", requestId);",
											"    ",
											"    // Extract request verification token",
											"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
											"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
											"    var requestVerificationToken = inputElement.val();",
											"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
											"});",
											"",
											"if (!pm.variables.get(\"ascensia_client_name\") ||",
											"    !pm.variables.get(\"ascensia_request_id\") ||",
											"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
											"        console.log(\"Skipping login request..\");",
											"        postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_client_name\");",
											"pm.environment.unset(\"ascensia_request_id\");",
											"pm.environment.unset(\"ascensia_request_verification_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
							},
							"response": [
								{
									"name": "01-00 Valid user authorization succeeds",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"{{ascensia_oauth_endpoint}}",
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "languagecode",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "countrycode",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Matched-Stub-Id",
											"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
											"name": "Matched-Stub-Id",
											"description": "Custom header"
										},
										{
											"key": "Server",
											"value": "Jetty(9.2.z-SNAPSHOT)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
								}
							]
						},
						{
							"name": "04-2-02 User authorization must succeed with valid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
											"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
											"        // Extract authorization code from JSON response.",
											"        pm.response.to.have.jsonBody();",
											"    ",
											"        var jsonResponse = pm.response.json();",
											"        ",
											"        // Handle Authorization Code parameter",
											"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
											"        var authorizationCode = jsonResponse.args.code;",
											"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"        ",
											"        // Handle ref_id  parameter",
											"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
											"        var referenceId = jsonResponse.args.reference_id;",
											"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"    } else {",
											"        // Handle the case the callback handler shows a temporary refresh page.",
											"        const cheerio = require('cheerio');",
											"        var $ = cheerio.load(responseBody);",
											"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
											"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
											"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
											"            pm.expect(err).to.be.null;",
											"            pm.expect(res).to.have.own.property('stream');",
											"            $ = cheerio.load(res.stream.toString('utf8'));",
											"            ",
											"            // Handle Authorization Code parameter",
											"            var authorizationCode = $('input[name=\"Code\"]').val();",
											"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"            // Handle ref_id  parameter",
											"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
											"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gemail",
											"value": "{{ascensia_user_login}}",
											"type": "text"
										},
										{
											"key": "gpassword",
											"value": "{{ascensia_user_password}}",
											"type": "text"
										},
										{
											"key": "__RequestVerificationToken",
											"value": "{{ascensia_request_verification_token}}",
											"type": "text"
										},
										{
											"key": "Scope",
											"value": "{{ascensia_valid_scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_service_base_url}}"
									],
									"path": [
										"Login",
										"Login"
									],
									"query": [
										{
											"key": "client",
											"value": "{{ascensia_client_name}}"
										},
										{
											"key": "requestId",
											"value": "{{ascensia_request_id}}"
										},
										{
											"key": "lang",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "Source",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-2-03 Get access_token request must succeed after successful authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_access_token\");",
											"pm.environment.unset(\"ascensia_refresh_token\");",
											"pm.environment.unset(\"ascensia_token_expiry_time\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
											"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
											"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
											"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
											"    ",
											"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
											"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
											"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
											"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								}
							},
							"response": []
						},
						{
							"name": "04-2-04 Get blood glucose data request must succeed when the request is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"    ",
											"    // Handle case where the test must be continued",
											"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
											"        pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-2-05 Get blood glucose data request must succeed if the EndDate is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"     pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-2-06 Get blood glucose data request must succeed if the StartDate after EndDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_end_date}}\",\r\n      \"EndDate\": \"{{ascensia_start_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "04-3 More Negative Tests",
					"item": [
						{
							"name": "04-3-01 Get blood glucose data request must fail when the request is missing UserKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an expected JSON body\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"BadRequest\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 15700);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"Parameter UserKey is required\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": \"\",\r\n      \"EndId\": \"\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-3-02 Get blood glucose data request must fail if the StartDate is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an expected JSON body\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"BadRequest\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 15700);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"Paramter StartDate is required for UserKey: \" + pm.variables.get(\"ascensia_user_reference_id\"));",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": \"\",\r\n      \"EndId\": \"\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-3-03 Get blood glucose data request must fail if the StartDate format is other than yyyy-MM-dd HH:mm:ss",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an expected JSON body\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"BadRequest\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 15700);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"12-31-2017\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": \"\",\r\n      \"EndId\": \"\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04-3-05 Get blood glucose data request must fail if the Continuation Token is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an expected JSON body\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"BadRequest\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 15800);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"ContinuationToken\": \"636792870470000000\",\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"2016-12-30\",\r\n      \"EndDate\": \"2018-12-12\",\r\n      \"StartId\": \"\",\r\n      \"EndId\": \"\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "05-Blood Glucose Related Data Access (/getbgrelateddata)",
			"item": [
				{
					"name": "05-1 Negative Tests",
					"item": [
						{
							"name": "05-1-01 Get blood glucose data request must fail without client_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "client_id",
										"value": "{{ascensia_registered_client_id}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{ascensia_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-1-02 Get blood glucose data request must fail when client_id is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": ""
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-1-03 Get blood glucose data request must fail without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-1-04 Get blood glucose data request must fail when authorization is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Missing Authorization/client_id header from request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "ClientID",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "ServiceName",
										"type": "text",
										"value": "getbgdata"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-1-05 Get blood glucose data request must fail if authorization data is not formatted correctly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Authorization denied for request. error code : Unauthorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "foo bar fissy bar"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-1-06 Get blood glucose data request must fail if authorization type is not Bearer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.be.unauthorized;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Authorization denied for request. error code : Unauthorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{ascensia_invalid_grant_type}} {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "05-2 Positive Tests",
					"item": [
						{
							"name": "05-2-01 User authorization request must succeed with valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
											"    pm.response.to.be.ok",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"    ",
											"    const cheerio = require('cheerio');",
											"    const $ = cheerio.load(responseBody);",
											"    ",
											"    // Extract request verification token",
											"    const sdk = require('postman-collection');",
											"    var actionUrl = new sdk.Url($('form').attr('action'));",
											"    ",
											"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
											"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
											"    var clientName = clientParameter.value;",
											"    pm.environment.set(\"ascensia_client_name\", clientName);",
											"    ",
											"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
											"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
											"    var requestId = requestIdParameter.value;",
											"    pm.environment.set(\"ascensia_request_id\", requestId);",
											"    ",
											"    // Extract request verification token",
											"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
											"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
											"    var requestVerificationToken = inputElement.val();",
											"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
											"});",
											"",
											"if (!pm.variables.get(\"ascensia_client_name\") ||",
											"    !pm.variables.get(\"ascensia_request_id\") ||",
											"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
											"        console.log(\"Skipping login request..\");",
											"        postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_client_name\");",
											"pm.environment.unset(\"ascensia_request_id\");",
											"pm.environment.unset(\"ascensia_request_verification_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
							},
							"response": [
								{
									"name": "01-00 Valid user authorization succeeds",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"{{ascensia_oauth_endpoint}}",
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "languagecode",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "countrycode",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Matched-Stub-Id",
											"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
											"name": "Matched-Stub-Id",
											"description": "Custom header"
										},
										{
											"key": "Server",
											"value": "Jetty(9.2.z-SNAPSHOT)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
								}
							]
						},
						{
							"name": "05-2-02 User authorization must succeed with valid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
											"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
											"        // Extract authorization code from JSON response.",
											"        pm.response.to.have.jsonBody();",
											"    ",
											"        var jsonResponse = pm.response.json();",
											"        ",
											"        // Handle Authorization Code parameter",
											"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
											"        var authorizationCode = jsonResponse.args.code;",
											"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"        ",
											"        // Handle ref_id  parameter",
											"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
											"        var referenceId = jsonResponse.args.reference_id;",
											"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"    } else {",
											"        // Handle the case the callback handler shows a temporary refresh page.",
											"        const cheerio = require('cheerio');",
											"        var $ = cheerio.load(responseBody);",
											"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
											"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
											"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
											"            pm.expect(err).to.be.null;",
											"            pm.expect(res).to.have.own.property('stream');",
											"            $ = cheerio.load(res.stream.toString('utf8'));",
											"            ",
											"            // Handle Authorization Code parameter",
											"            var authorizationCode = $('input[name=\"Code\"]').val();",
											"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"            // Handle ref_id  parameter",
											"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
											"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gemail",
											"value": "{{ascensia_user_login}}",
											"type": "text"
										},
										{
											"key": "gpassword",
											"value": "{{ascensia_user_password}}",
											"type": "text"
										},
										{
											"key": "__RequestVerificationToken",
											"value": "{{ascensia_request_verification_token}}",
											"type": "text"
										},
										{
											"key": "Scope",
											"value": "{{ascensia_valid_scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_service_base_url}}"
									],
									"path": [
										"Login",
										"Login"
									],
									"query": [
										{
											"key": "client",
											"value": "{{ascensia_client_name}}"
										},
										{
											"key": "requestId",
											"value": "{{ascensia_request_id}}"
										},
										{
											"key": "lang",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "Source",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-2-03 Get access_token request must succeed after successful authorization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_access_token\");",
											"pm.environment.unset(\"ascensia_refresh_token\");",
											"pm.environment.unset(\"ascensia_token_expiry_time\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
											"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
											"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
											"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
											"    ",
											"    pm.environment.set(\"ascensia_access_token\", jsonResponse.access_token);",
											"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
											"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
											"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{ascensia_authorization_code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "{{ascensia_auth_grant_type}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								}
							},
							"response": []
						},
						{
							"name": "05-2-04 Get blood glucose related data request must succeed when the request is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"    ",
											"    // Handle case where the test must be continued",
											"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
											"        pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n    \t\t\"StartId\": null,\r\n    \t\t\"EndId\": null\r\n    \t}\r\n\t]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-2-05 Get blood glucose related data request must succeed if the EndDate is missing Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "05-2-06 Get blood glucose related data request must succeed if the StartDate after EndDate Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n      \"StartDate\": \"{{ascensia_end_date}}\",\r\n      \"EndDate\": \"{{ascensia_start_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "05-3 More Negative Tests",
					"item": [
						{
							"name": "05-3-01 Get blood glucose related data request must fail when the request is missing UserKey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an expected JSON body\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"BadRequest\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 15700);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"Parameter UserKey is required\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Users\": [\r\n    {\r\n      \"StartDate\": \"{{ascensia_start_date}}\",\r\n      \"EndDate\": \"{{ascensia_end_date}}\",\r\n      \"StartId\": null,\r\n      \"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "06-Bulk Data Access",
			"item": [
				{
					"name": "06-1 Grant Access For User #1",
					"item": [
						{
							"name": "06-2-01 User authorization request must succeed with valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
											"    pm.response.to.be.ok",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"    ",
											"    const cheerio = require('cheerio');",
											"    const $ = cheerio.load(responseBody);",
											"    ",
											"    // Extract request verification token",
											"    const sdk = require('postman-collection');",
											"    var actionUrl = new sdk.Url($('form').attr('action'));",
											"    ",
											"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
											"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
											"    var clientName = clientParameter.value;",
											"    pm.environment.set(\"ascensia_client_name\", clientName);",
											"    ",
											"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
											"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
											"    var requestId = requestIdParameter.value;",
											"    pm.environment.set(\"ascensia_request_id\", requestId);",
											"    ",
											"    // Extract request verification token",
											"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
											"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
											"    var requestVerificationToken = inputElement.val();",
											"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
											"});",
											"",
											"if (!pm.variables.get(\"ascensia_client_name\") ||",
											"    !pm.variables.get(\"ascensia_request_id\") ||",
											"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
											"        console.log(\"Skipping login request..\");",
											"        postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_client_name\");",
											"pm.environment.unset(\"ascensia_request_id\");",
											"pm.environment.unset(\"ascensia_request_verification_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "06-2-02 User authorization must succeed with valid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
											"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
											"        // Extract authorization code from JSON response.",
											"        pm.response.to.have.jsonBody();",
											"    ",
											"        var jsonResponse = pm.response.json();",
											"        ",
											"        // Handle Authorization Code parameter",
											"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
											"        var authorizationCode = jsonResponse.args.code;",
											"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"        ",
											"        // Handle ref_id  parameter",
											"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
											"        var referenceId = jsonResponse.args.reference_id;",
											"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"    } else {",
											"        // Handle the case the callback handler shows a temporary refresh page.",
											"        const cheerio = require('cheerio');",
											"        var $ = cheerio.load(responseBody);",
											"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
											"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
											"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
											"            pm.expect(err).to.be.null;",
											"            pm.expect(res).to.have.own.property('stream');",
											"            $ = cheerio.load(res.stream.toString('utf8'));",
											"            ",
											"            // Handle Authorization Code parameter",
											"            var authorizationCode = $('input[name=\"Code\"]').val();",
											"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"            // Handle ref_id  parameter",
											"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
											"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gemail",
											"value": "{{ascensia_user_login}}",
											"type": "text"
										},
										{
											"key": "gpassword",
											"value": "{{ascensia_user_password}}",
											"type": "text"
										},
										{
											"key": "__RequestVerificationToken",
											"value": "{{ascensia_request_verification_token}}",
											"type": "text"
										},
										{
											"key": "Scope",
											"value": "{{ascensia_valid_scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_service_base_url}}"
									],
									"path": [
										"Login",
										"Login"
									],
									"query": [
										{
											"key": "client",
											"value": "{{ascensia_client_name}}"
										},
										{
											"key": "requestId",
											"value": "{{ascensia_request_id}}"
										},
										{
											"key": "lang",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "Source",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								},
								"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
							},
							"response": []
						}
					]
				},
				{
					"name": "06-1-1 UserAuth",
					"item": [
						{
							"name": "06-1-1-01 User 1 Auth",
							"item": [
								{
									"name": "06-1-1-1-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "06-1-1-1-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_one_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_one_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_one_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_one_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "06-1-1-02 User 2 Auth",
							"item": [
								{
									"name": "06-1-1-2-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "06-1-1-2-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_two_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_two_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_two_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_two_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "06-1-1-03 User 3 Auth Account 4 with 1300 readings",
							"item": [
								{
									"name": "06-1-1-03-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "06-1-1-03-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_four_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_four_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_four_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_three_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "06-1-1-03-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");",
													"pm.environment.unset(\"ascensia_transaction_marker\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token_user3\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "06-1-1-04 User a Auth Account 3 with BG related data",
							"item": [
								{
									"name": "06-1-1-04-1 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "06-1-1-04-2 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_three_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_three_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_three_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_three_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "06-1-1-04-3 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");",
													"pm.environment.unset(\"ascensia_transaction_marker\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token_user3\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "06-2 Get Partner Access Token",
					"item": [
						{
							"name": "06-2-01 Get access_token request must succeed for grant_type 'client_credentials'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_partner_access_token\");",
											"pm.environment.unset(\"ascensia_partner_refresh_token\");",
											"pm.environment.unset(\"ascensia_partner_token_expiry_time\");",
											"pm.environment.unset('ascensia_transaction_marker', '');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
											"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
											"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
											"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
											"    ",
											"    pm.environment.set(\"ascensia_partner_access_token\", jsonResponse.access_token);",
											"    pm.environment.set(\"ascensia_partner_refresh_token\", jsonResponse.refresh_token);",
											"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
											"    pm.environment.set(\"ascensia_partner_token_expiry_time\", expiryTime);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "client_secret",
											"value": "{{ascensia_registered_client_secret}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Token",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "06-3 Get Bulk Data",
					"item": [
						{
							"name": "06-3-01 Get blood glucose data request- Bulk Data-using Client access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"//    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"//    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"//            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"//            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"    ",
											"    // Handle case where the test must be continued",
											"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
											"        pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_partner_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Users\": [\n    {\n      \"UserKey\": \"16cfad6fee6f41c1aea0be4dd5358ade\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"16cfad6fee6f41c1aea0be4dd5358ade\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"bc1fc2a27b6d45bfbb5b768154069d41\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"20a19c36775e40d686638fb305bc7798\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"669ec2a9003547a2b636d89b4f62e554\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "06-3-01-01 Get blood glucose data request- Bulk Data-using Client access token Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"//  pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"//  pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"//            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"//            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"    ",
											"    // Handle case where the test must be continued",
											"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
											"        pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_partner_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Users\": [\n    {\n      \"UserKey\": \"bc1fc2a27b6d45bfbb5b768154069d41\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"bc1fc2a27b6d45bfbb5b768154069d41\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"20a19c36775e40d686638fb305bc7798\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    },\n    {\n      \"UserKey\": \"669ec2a9003547a2b636d89b4f62e554\",\n      \"StartDate\": \"2018-10-09\",\n      \"EndDate\": \"2019-01-07\",\n      \"StartId\": null,\n      \"EndId\": null\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "06-3-02 Get blood glucose related data request must succeed when the request is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"//    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"//    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"//            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"//            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"        }",
											"    });",
											"    ",
											"    // Handle case where the test must be continued",
											"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
											"        pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_partner_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }, \t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_three_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }, \r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_one_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    },\r\n    \r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_two_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    },\r\n   \r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_four_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var moment = require('moment');",
									"var today = moment();",
									"pm.variables.set(\"ascensia_end_date\", today.format(\"YYYY-MM-DD\"));",
									"today.subtract(90, 'day');",
									"pm.variables.set(\"ascensia_start_date\", today.format(\"YYYY-MM-DD\"));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "07-Get Token (/GetToken)",
			"item": [
				{
					"name": "01-1 Negative Tests",
					"item": [
						{
							"name": "01-1-01 Get User Token request must fail if client_id is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: client_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration.",
											"disabled": true
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "If the authorization request does not include the \"client_id\" query parameter, the service is expected to return a HTTP 400 (BAD REQUEST) response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: client_id\"\n}"
							},
							"response": [
								{
									"name": "01-00 Valid user authorization succeeds",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"{{ascensia_oauth_endpoint}}",
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "languagecode",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "countrycode",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"name": "Content-Encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Matched-Stub-Id",
											"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
											"name": "Matched-Stub-Id",
											"description": "Custom header"
										},
										{
											"key": "Server",
											"value": "Jetty(9.2.z-SNAPSHOT)",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding, User-Agent",
											"name": "Vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
								}
							]
						},
						{
							"name": "01-1-02 User authorization request must fail if response_type is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: response_type\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "If the authorization request does not include the \"response_type\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: response_type\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-03 User authorization request must fail if scope is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_scope(s)\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: scope\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request does not include the \"scope\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_scope(s)\",\n    \"error_description\": \"required parameter is missing: scope\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-04 User authorization request must fail if language_code is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: language_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request does not include the \"language_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: language_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-05 User authorization request must fail if language_code is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"invalid language_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_invalid_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_invalid_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes an unsupported or invalid \"language_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"invalid language_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-06 User authorization request must fail if country_code is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: country_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request does not include the \"country_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"required parameter is missing: country_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-07 User authorization request must fail if country_code is invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"invalid country_code\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_invalid_countrycode}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_invalid_countrycode}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes an unsupported or invalid \"country_code\" query parameter, the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"invalid country_code\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-08 User authorization request must fail if the scope is not 'Contour'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"invalid_scope(s)\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"requested scope(s) not registered\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_invalid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_invalid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes a \"scope\" query parameter with a value other than \"Contour\", the service is expected to return a HTTP 200 OK response, with a json payload that says:\n\n{\n    \"error\": \"invalid_scope(s)\",\n    \"error_description\": \"requested scope(s) not registered\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-09 User authorization request must fail if client_id is not registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUEST) with the expected json body\", function () {",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"invalid client_id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_unregistered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_unregistered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "If the authorization request includes a \"client_id\" query parameter value that is not registered, the service is expected to return a HTTP 400 Bad Request response, with a json payload that says:\n\n{\n    \"error\": \"invalid_request\",\n    \"error_description\": \"invalid client_id\"\n}"
							},
							"response": []
						},
						{
							"name": "01-1-10 User authorization request must fail if the redirect_uri is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the response is HTTP 400 (BAD_REQUST) with the expected JSON body\", function () {",
											"    pm.response.to.be.badRequest;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error\", \"invalid_request\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"error_description\", \"required parameter is missing: redirect_uri\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration.",
											"disabled": true
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "01-1-11 User authorization request must fail if the response_type is not code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that the request was redirected with the expected query parameters\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonResponse = pm.response.json();",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error\", \"unsupported_response_type\");",
											"    pm.expect(jsonResponse.args, \"Response\").to.have.property(\"error_description\", \"unsupported response_type parameter\");",
											"    pm.expect(jsonResponse.args, \"Response\")",
											"        .to.have.property('state', pm.request.url.query.get('state'));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_invalid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}"
										},
										{
											"key": "response_type",
											"value": "{{ascensia_invalid_response_type}}"
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}"
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}"
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						}
					]
				},
				{
					"name": "01-2 Positive Tests",
					"item": [
						{
							"name": "01-2-01 User authorization request must succeed with valid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
											"    pm.response.to.be.ok",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"    ",
											"    const cheerio = require('cheerio');",
											"    const $ = cheerio.load(responseBody);",
											"    ",
											"    // Extract request verification token",
											"    const sdk = require('postman-collection');",
											"    var actionUrl = new sdk.Url($('form').attr('action'));",
											"    ",
											"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
											"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
											"    var clientName = clientParameter.value;",
											"    pm.environment.set(\"ascensia_client_name\", clientName);",
											"    ",
											"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
											"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
											"    var requestId = requestIdParameter.value;",
											"    pm.environment.set(\"ascensia_request_id\", requestId);",
											"    ",
											"    // Extract request verification token",
											"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
											"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
											"    var requestVerificationToken = inputElement.val();",
											"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
											"});",
											"",
											"if (!pm.variables.get(\"ascensia_client_name\") ||",
											"    !pm.variables.get(\"ascensia_request_id\") ||",
											"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
											"        console.log(\"Skipping login request..\");",
											"        postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"ascensia_client_name\");",
											"pm.environment.unset(\"ascensia_request_id\");",
											"pm.environment.unset(\"ascensia_request_verification_token\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "01-2-01 User authorization must succeed with valid login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
											"    pm.response.to.be.ok;",
											"    ",
											"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
											"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
											"        // Extract authorization code from JSON response.",
											"        pm.response.to.have.jsonBody();",
											"    ",
											"        var jsonResponse = pm.response.json();",
											"        ",
											"        // Handle Authorization Code parameter",
											"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
											"        var authorizationCode = jsonResponse.args.code;",
											"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"        ",
											"        // Handle ref_id  parameter",
											"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
											"        var referenceId = jsonResponse.args.reference_id;",
											"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"    } else {",
											"        // Handle the case the callback handler shows a temporary refresh page.",
											"        const cheerio = require('cheerio');",
											"        var $ = cheerio.load(responseBody);",
											"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
											"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
											"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
											"            pm.expect(err).to.be.null;",
											"            pm.expect(res).to.have.own.property('stream');",
											"            $ = cheerio.load(res.stream.toString('utf8'));",
											"            ",
											"            // Handle Authorization Code parameter",
											"            var authorizationCode = $('input[name=\"Code\"]').val();",
											"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
											"        ",
											"            // Handle ref_id  parameter",
											"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
											"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
											"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "gemail",
											"value": "{{ascensia_user_login}}",
											"type": "text"
										},
										{
											"key": "gpassword",
											"value": "{{ascensia_user_password}}",
											"type": "text"
										},
										{
											"key": "__RequestVerificationToken",
											"value": "{{ascensia_request_verification_token}}",
											"type": "text"
										},
										{
											"key": "Scope",
											"value": "{{ascensia_valid_scope}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
									"host": [
										"{{ascensia_connect_service_base_url}}"
									],
									"path": [
										"Login",
										"Login"
									],
									"query": [
										{
											"key": "client",
											"value": "{{ascensia_client_name}}"
										},
										{
											"key": "requestId",
											"value": "{{ascensia_request_id}}"
										},
										{
											"key": "lang",
											"value": "{{ascensia_default_language_code}}"
										},
										{
											"key": "Source",
											"value": "{{ascensia_valid_scope}}"
										},
										{
											"key": "CountryCode",
											"value": "{{ascensia_default_country_code}}"
										}
									]
								},
								"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
							},
							"response": []
						}
					]
				}
			],
			"description": "The get token endpoint will be typically used by the Contour mobile app to authorize a third party service provider to access data or make service requests on behalf of an user. The tests in the sections verifies whether the endpoint implementation meets the expected behavior documented in the associated API documentation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "08-Get BG Data Comparision",
			"item": [
				{
					"name": "08-01 UserAuth",
					"item": [
						{
							"name": "08-01-01 User 1 Auth",
							"item": [
								{
									"name": "08-1-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "08-1-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_one_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_one_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_one_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_one_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "08-1-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token_user1\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "08-01-02 User 2 Auth",
							"item": [
								{
									"name": "08-1-02-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "08-1-02-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_two_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_two_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_two_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_two_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "08-1-02-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token_user2\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "08-01-03 User 3 Auth",
							"item": [
								{
									"name": "08-1-03-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_random_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "The user authorization is the process in which the Contour Mobile App users provide authorization to Ascensia Connect for sharing the BG readings and the user profile information. \r\nThe 3rd party partner website or native app should provide the user ‘Connect with Ascensia Connect’ button. The button click redirects the request to the Authorization endpoint which is a webpage on the Ascensia Connect. \r\n"
									},
									"response": [
										{
											"name": "01-00 Valid user authorization succeeds",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/{{ascensia_oauth_endpoint}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&languagecode={{ascensia_default_language_code}}&countrycode={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"{{ascensia_oauth_endpoint}}",
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "languagecode",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "countrycode",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "plain",
											"header": [
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"name": "Content-Encoding",
													"description": "The type of encoding used on the data."
												},
												{
													"key": "Content-Type",
													"value": "text/plain",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Matched-Stub-Id",
													"value": "0f48251e-5c10-4fe0-acea-ebf922b92cb1",
													"name": "Matched-Stub-Id",
													"description": "Custom header"
												},
												{
													"key": "Server",
													"value": "Jetty(9.2.z-SNAPSHOT)",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked",
													"name": "Transfer-Encoding",
													"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding, User-Agent",
													"name": "Vary",
													"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
												}
											],
											"cookie": [],
											"body": "{code&#x3D;e13396b1-469b-4dfc-b74f-82fc928a8a36, state&#x3D;mock_state_853}"
										}
									]
								},
								{
									"name": "08-1-03-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_three_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_three_reference_id\", referenceId);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_three_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_three_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "08-1-03-03 Get access_token request must succeed after successful authorization",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_access_token\");",
													"pm.environment.unset(\"ascensia_refresh_token\");",
													"pm.environment.unset(\"ascensia_token_expiry_time\");",
													"pm.environment.unset(\"ascensia_transaction_marker\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_access_token_user3\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{ascensia_authorization_code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "{{ascensia_auth_grant_type}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "8-02-GetBGData for User 1 mmol data comparision",
					"item": [
						{
							"name": "08-2-01 Get blood glucose data request User Account 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    //Get Expected User Data",
											"     var user_1_input_bg_data = JSON.parse(pm.environment.get('user_1_input_bg_data'));",
											"    ",
											"   ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"        }",
											"        ",
											"        var actualBGData = actualUser.BGData;",
											"",
											"        ",
											"        for(var re in actualBGData) {",
											"            act_reading = Number(Math.round(actualBGData[re].Value+'e1')+'e-1');",
											"            actual_reading = String(act_reading);",
											"            expected_reading = String(user_1_input_bg_data[re].BGValue);",
											"            ",
											"            let datetime_expected = String(user_1_input_bg_data[re].DateTime);",
											"            let datetime_actual = String(actualBGData[re].DateTime);",
											"            ",
											"            let meal_expected = String(user_1_input_bg_data[re].MealMarker);",
											"            let meal_actual_value = actualBGData[re].MealCategory;",
											"            ",
											"            var meal_actual_string = \"\";",
											"            ",
											"            if(meal_actual_value === 0) {",
											"                meal_actual_string = \"No mark\";",
											"            } else if(meal_actual_value === 1){",
											"               meal_actual_string = \"Pre-meal\"; ",
											"            } else if(meal_actual_value === 2){",
											"               meal_actual_string = \"Post-meal\"; ",
											"            } else {",
											"                meal_actual_string = \"Fasting\";",
											"            }",
											"      ",
											"            let bgunit_expected = String(user_1_input_bg_data[re].BGUnit);",
											"            let bgunit_actual = String(actualBGData[re].Unit);",
											"            ",
											"            let meterid_expected_length = pm.globals.get(\"ascensia_meter_id_hash_length\");",
											"            let meterid_actual_length = String(actualBGData[re].MeterId).length;",
											"        ",
											"            pm.expect(expected_reading).to.eql(actual_reading);",
											"            pm.expect(meal_expected).to.eql(meal_actual_string);",
											"            pm.expect(bgunit_expected).to.eql(bgunit_actual);",
											"            pm.expect(meterid_expected_length).to.eql(meterid_actual_length);",
											"        }",
											"",
											"",
											"    });",
											"    ",
											"    ",
											"    if (jsonResponse.ContinuationToken > 0) {",
											"          pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token_user1}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_one_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8-03 GetBGData for User 2 mg/dL data comparison",
					"item": [
						{
							"name": "08-03-01 Get blood glucose data request User Account 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    //Getting input BG data from environment variable",
											"    var actual_records;",
											"    if (pm.environment.get('actual_bg_data_user_2').length > 0) {",
											"      actual_records   = JSON.parse(pm.environment.get('actual_bg_data_user_2'));",
											"    } else {",
											"      actual_records = [];",
											"    }",
											"    ",
											"    var expected_bg_records = JSON.parse(pm.environment.get('user_2_input_bg_data'));",
											"    ",
											"",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"        }",
											"        var actualBGData = actualUser.BGData;",
											"        actual_records.push(actualBGData);",
											" ",
											"    });",
											"    ",
											"    ",
											"    if (jsonResponse.ContinuationToken > 0) {",
											"        pm.environment.set('actual_bg_data_user_2', JSON.stringify(actual_records));",
											"        ",
											"        pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"        ",
											"        ",
											"    } else {",
											"        //When all records are fetched",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"        ",
											"        var all_records =JSON.stringify(actual_records);",
											"     ",
											"       var all_actual_readings = [].concat.apply([],actual_records);",
											"       var actual_count = all_actual_readings.length;",
											"       ",
											"       ",
											"        pm.expect(String(actual_count)).to.eql(String(expected_bg_records.length));",
											"        ",
											"        //Compare BG records with expected data",
											"       ",
											"       for(var i=0; i < all_actual_readings.length; i++ ){",
											"           let actual_reading_val = all_actual_readings[i].Value;",
											"           let expected_reading_val = expected_bg_records[i].BGValue;",
											" ",
											"           let datetime_expected = String(expected_bg_records[i].DateTime);",
											"            let datetime_actual = String(all_actual_readings[i].DateTime);",
											"            ",
											"            let meal_expected = String(expected_bg_records[i].MealMarker);",
											"            let meal_actual_value = all_actual_readings[i].MealCategory;",
											"            ",
											"            var meal_actual_string = \"\";",
											"            ",
											"            if(meal_actual_value === 0) {",
											"                meal_actual_string = \"No mark\";",
											"            } else if(meal_actual_value === 1){",
											"               meal_actual_string = \"Pre-meal\"; ",
											"            } else if(meal_actual_value === 2){",
											"               meal_actual_string = \"Post-meal\"; ",
											"            } else {",
											"                meal_actual_string = \"Fasting\";",
											"            }",
											"    ",
											"            ",
											"            let bgunit_expected = String(expected_bg_records[i].BGUnit);",
											"            let bgunit_actual = String(all_actual_readings[i].Unit);",
											"            ",
											"            let meterid_expected_length = pm.globals.get(\"ascensia_meter_id_hash_length\");",
											"            let meterid_actual_length = String(all_actual_readings[i].MeterId).length;",
											"            ",
											"            pm.expect(actual_reading).to.eql(expected_reading);",
											"            pm.expect(meterid_expected_length).to.eql(meterid_actual_length);",
											"           ",
											"        }",
											"       ",
											"    }",
											"    ",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token_user2}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_two_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8-04 GetBG Data for User3 has no BG records",
					"item": [
						{
							"name": "08-04-01GetBGData User Account 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"   ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
											"            //Verify there are no BG records with value in the user account",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").to.have.lengthOf(0);",
											"        }",
											"    });",
											"    ",
											"    ",
											"    if (jsonResponse.ContinuationToken > 0) {",
											"         pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    }  else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token_user3}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_three_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgdata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8-06-BG Related Data- User1, User2 no BG related data",
					"item": [
						{
							"name": "08-06-01 Get BGRelated Data-User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"            //Verify BG related data is empty for accounts with BG data alone",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").to.have.lengthOf(0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"",
											"            var actualBGRelatedData = actualUser.BGRelatedData;",
											"            pm.expect(String(actualBGRelatedData.length)).to.eql(\"0\");",
											"        }",
											"    });",
											"    ",
											" if (jsonResponse.ContinuationToken > 0) {",
											"         pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    }  else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token_user1}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_one_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "08-06-02 Get BGRelated Data-User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"            //Verify BG related data is empty for accounts with BG data alone",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").to.have.lengthOf(0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"            ",
											"            var actualBGRelatedData = actualUser.BGRelatedData;",
											"            pm.expect(String(actualBGRelatedData.length)).to.eql(\"0\");",
											"        }",
											"    });",
											"    ",
											"    if (jsonResponse.ContinuationToken > 0) {",
											"         pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"    }  else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token_user2}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_two_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "8-07-BG Related Data for User 3, with BG related data",
					"item": [
						{
							"name": "08-07-01 Get BGRelated Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify test case #\" + request.name, function () {",
											"    pm.response.to.have.jsonBody();",
											"    ",
											"     ",
											"    ",
											"    var jsonRequest = JSON.parse(pm.request.body);",
											"    var jsonResponse = pm.response.json();",
											"    ",
											"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
											"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
											"    }",
											"    ",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
											"    pm.expect(jsonResponse, \"Response\").to.have.property(\"TransactionID\").to.have.lengthOf(pm.globals.get(\"ascensia_transactionid_length\"));",
											"    ",
											"    jsonRequest.Users.forEach( expectedUser => {",
											"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
											"        if (actualUser !== undefined) {",
											"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 0);",
											"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\", \"\");",
											"            ",
											"            var actualBGRelatedData = actualUser.BGRelatedData;",
											"            ",
											"            if(actualBGRelatedData.length > 0) {",
											"                actualBGRelatedData.forEach(function (dataitem) {",
											"                    pm.expect(dataitem, \"RelatedData\").to.have.property(\"Activity\").that.is.a('array');",
											"                    pm.expect(dataitem, \"RelatedData\").to.have.property(\"Food\").that.is.a('array');",
											"                    pm.expect(dataitem, \"RelatedData\").to.have.property(\"Medication\").that.is.a('array');",
											"                });",
											"            }",
											"        }",
											"    });",
											"    ",
											"    if (jsonResponse.ContinuationToken > 0) {",
											"      pm.environment.set('ascensia_transaction_marker', ",
											"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
											"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
											"        postman.setNextRequest(request.name);",
											"",
											"    } else {",
											"        pm.environment.unset('ascensia_transaction_marker', '');",
											"    }",
											"    ",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "client_id",
										"type": "text",
										"value": "{{ascensia_registered_client_id}}"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{ascensia_access_token_user3}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_three_reference_id}}\",\r\n       \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
									"host": [
										"{{ascensia_connect_bgdata_service}}"
									],
									"path": [
										"getbgrelateddata"
									],
									"query": [
										{
											"key": "DataSource",
											"value": "Contour"
										},
										{
											"key": "CountryCode",
											"value": "US"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "09-Penetration Tests",
			"item": [
				{
					"name": "09-1 Incorrect HTTP Method Tests",
					"item": [
						{
							"name": "09-1-01 User authorization request must fail gracefully when HTTP method is POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 404 (Not Found) with an HTML error page\", function () {",
											"    pm.response.to.be.notFound",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "09-1-02 User authorization request must fail gracefully when HTTP method is PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 404 (Not Found) with an HTML error page\", function () {",
											"    pm.response.to.be.notFound",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "09-1-03 User authorization request must fail gracefully when HTTP method is DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 404 (Not Found) with an HTML error page\", function () {",
											"    pm.response.to.be.notFound",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "09-1-04 User authorization request must fail gracefully when HTTP method is COPY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 404 (Not Found) with an HTML error page\", function () {",
											"    pm.response.to.be.notFound",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "COPY",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						},
						{
							"name": "09-1-05 User authorization request must fail gracefully when HTTP method is HEAD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify that response is HTTP 404 (Not Found) with an HTML error page\", function () {",
											"    pm.response.to.be.notFound",
											"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
									"host": [
										"{{ascensia_oauth_service_base_url}}"
									],
									"path": [
										"Authorize"
									],
									"query": [
										{
											"key": "client_id",
											"value": "{{ascensia_registered_client_id}}",
											"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
										},
										{
											"key": "response_type",
											"value": "{{ascensia_valid_response_type}}",
											"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
										},
										{
											"key": "scope",
											"value": "{{ascensia_valid_scope}}",
											"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
										},
										{
											"key": "state",
											"value": "{{ascensia_random_state}}",
											"description": "Should be in request, can be left blank"
										},
										{
											"key": "language_code",
											"value": "{{ascensia_default_language_code}}",
											"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
										},
										{
											"key": "country_code",
											"value": "{{ascensia_default_country_code}}",
											"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
										},
										{
											"key": "redirect_uri",
											"value": "{{ascensia_redirect_uri}}",
											"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
										}
									]
								},
								"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
							},
							"response": []
						}
					]
				},
				{
					"name": "09-2  Privilege Escalation Vulnerability Tests",
					"item": [
						{
							"name": "09-2-1 User Access token Misuse Test",
							"item": [
								{
									"name": "09-2-1-1 Obtain access token for user A",
									"item": [
										{
											"name": "09-2-1-1-01 User authorization request must succeed with valid input",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
															"    pm.response.to.be.ok",
															"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
															"    ",
															"    const cheerio = require('cheerio');",
															"    const $ = cheerio.load(responseBody);",
															"    ",
															"    // Extract request verification token",
															"    const sdk = require('postman-collection');",
															"    var actionUrl = new sdk.Url($('form').attr('action'));",
															"    ",
															"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
															"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
															"    var clientName = clientParameter.value;",
															"    pm.environment.set(\"ascensia_client_name\", clientName);",
															"    ",
															"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
															"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
															"    var requestId = requestIdParameter.value;",
															"    pm.environment.set(\"ascensia_request_id\", requestId);",
															"    ",
															"    // Extract request verification token",
															"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
															"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
															"    var requestVerificationToken = inputElement.val();",
															"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
															"});",
															"",
															"if (!pm.variables.get(\"ascensia_client_name\") ||",
															"    !pm.variables.get(\"ascensia_request_id\") ||",
															"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
															"        console.log(\"Skipping login request..\");",
															"        postman.setNextRequest(null);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.unset(\"ascensia_client_name\");",
															"pm.environment.unset(\"ascensia_request_id\");",
															"pm.environment.unset(\"ascensia_request_verification_token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{ascensia_oauth_service_base_url}}"
													],
													"path": [
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "language_code",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "country_code",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												},
												"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
											},
											"response": []
										},
										{
											"name": "09-2-1-1-02 User authorization must succeed with valid login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
															"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
															"        // Extract authorization code from JSON response.",
															"        pm.response.to.have.jsonBody();",
															"    ",
															"        var jsonResponse = pm.response.json();",
															"        ",
															"        // Handle Authorization Code parameter",
															"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
															"        var authorizationCode = jsonResponse.args.code;",
															"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
															"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
															"        ",
															"        ",
															"        // Handle ref_id  parameter",
															"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
															"        var referenceId = jsonResponse.args.reference_id;",
															"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
															"        pm.environment.set(\"ascensia_user_one_reference_id\", referenceId);",
															"    } else {",
															"        // Handle the case the callback handler shows a temporary refresh page.",
															"        const cheerio = require('cheerio');",
															"        var $ = cheerio.load(responseBody);",
															"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
															"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
															"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
															"            pm.expect(err).to.be.null;",
															"            pm.expect(res).to.have.own.property('stream');",
															"            $ = cheerio.load(res.stream.toString('utf8'));",
															"            ",
															"            // Handle Authorization Code parameter",
															"            var authorizationCode = $('input[name=\"Code\"]').val();",
															"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
															"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
															"        ",
															"            // Handle ref_id  parameter",
															"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
															"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
															"            pm.environment.set(\"ascensia_user_one_reference_id\", referenceId);",
															"        });",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "gemail",
															"value": "{{ascensia_user_one_login}}",
															"type": "text"
														},
														{
															"key": "gpassword",
															"value": "{{ascensia_user_one_password}}",
															"type": "text"
														},
														{
															"key": "__RequestVerificationToken",
															"value": "{{ascensia_request_verification_token}}",
															"type": "text"
														},
														{
															"key": "Scope",
															"value": "{{ascensia_valid_scope}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
													"host": [
														"{{ascensia_connect_service_base_url}}"
													],
													"path": [
														"Login",
														"Login"
													],
													"query": [
														{
															"key": "client",
															"value": "{{ascensia_client_name}}"
														},
														{
															"key": "requestId",
															"value": "{{ascensia_request_id}}"
														},
														{
															"key": "lang",
															"value": "{{ascensia_default_language_code}}"
														},
														{
															"key": "Source",
															"value": "{{ascensia_valid_scope}}"
														},
														{
															"key": "CountryCode",
															"value": "{{ascensia_default_country_code}}"
														}
													]
												},
												"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
											},
											"response": []
										},
										{
											"name": "09-2-1-1-03 Get access_token request must succeed after successful authorization",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.unset(\"ascensia_user_one_access_token\");",
															"pm.environment.unset(\"ascensia_user_one_refresh_token\");",
															"pm.environment.unset(\"ascensia_user_one_token_expiry_time\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"pm.test(\"Verify test case #\" + request.name, function () {",
															"    pm.response.to.have.jsonBody();",
															"    ",
															"    var jsonResponse = pm.response.json();",
															"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
															"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
															"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
															"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
															"    ",
															"    pm.environment.set(\"ascensia_user_one_access_token\", jsonResponse.access_token);",
															"    pm.environment.set(\"ascensia_user_one_refresh_token\", jsonResponse.refresh_token);",
															"    console.log(\"Access token will expire after \" + jsonResponse.expires_in + \"ms...\");",
															"    var expiryTime = new Date().getTime() + 1000 * jsonResponse.expires_in;",
															"    pm.environment.set(\"ascensia_user_one_token_expiry_time\", expiryTime);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "code",
															"value": "{{ascensia_authorization_code}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}"
														},
														{
															"key": "client_secret",
															"value": "{{ascensia_registered_client_secret}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "{{ascensia_auth_grant_type}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{ascensia_oauth_service_base_url}}/Token",
													"host": [
														"{{ascensia_oauth_service_base_url}}"
													],
													"path": [
														"Token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "09-2-1-2 Obtain access token for user B",
									"item": [
										{
											"name": "09-2-1-2-01 User authorization request must succeed with valid input",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
															"    pm.response.to.be.ok",
															"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
															"    ",
															"    const cheerio = require('cheerio');",
															"    const $ = cheerio.load(responseBody);",
															"    ",
															"    // Extract request verification token",
															"    const sdk = require('postman-collection');",
															"    var actionUrl = new sdk.Url($('form').attr('action'));",
															"    ",
															"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
															"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
															"    var clientName = clientParameter.value;",
															"    pm.environment.set(\"ascensia_client_name\", clientName);",
															"    ",
															"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
															"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
															"    var requestId = requestIdParameter.value;",
															"    pm.environment.set(\"ascensia_request_id\", requestId);",
															"    ",
															"    // Extract request verification token",
															"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
															"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
															"    var requestVerificationToken = inputElement.val();",
															"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
															"});",
															"",
															"if (!pm.variables.get(\"ascensia_client_name\") ||",
															"    !pm.variables.get(\"ascensia_request_id\") ||",
															"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
															"        console.log(\"Skipping login request..\");",
															"        postman.setNextRequest(null);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.unset(\"ascensia_client_name\");",
															"pm.environment.unset(\"ascensia_request_id\");",
															"pm.environment.unset(\"ascensia_request_verification_token\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_random_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
													"host": [
														"{{ascensia_oauth_service_base_url}}"
													],
													"path": [
														"Authorize"
													],
													"query": [
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}",
															"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
														},
														{
															"key": "response_type",
															"value": "{{ascensia_valid_response_type}}",
															"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
														},
														{
															"key": "scope",
															"value": "{{ascensia_valid_scope}}",
															"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
														},
														{
															"key": "state",
															"value": "{{ascensia_random_state}}",
															"description": "Should be in request, can be left blank"
														},
														{
															"key": "language_code",
															"value": "{{ascensia_default_language_code}}",
															"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
														},
														{
															"key": "country_code",
															"value": "{{ascensia_default_country_code}}",
															"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
														}
													]
												},
												"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
											},
											"response": []
										},
										{
											"name": "09-2-1-2-02 User authorization must succeed with valid login",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
															"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
															"        // Extract authorization code from JSON response.",
															"        pm.response.to.have.jsonBody();",
															"    ",
															"        var jsonResponse = pm.response.json();",
															"        ",
															"        // Handle Authorization Code parameter",
															"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
															"        var authorizationCode = jsonResponse.args.code;",
															"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
															"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
															"        ",
															"        ",
															"        // Handle ref_id  parameter",
															"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
															"        var referenceId = jsonResponse.args.reference_id;",
															"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
															"        pm.environment.set(\"ascensia_user_two_reference_id\", referenceId);",
															"    } else {",
															"        // Handle the case the callback handler shows a temporary refresh page.",
															"        const cheerio = require('cheerio');",
															"        var $ = cheerio.load(responseBody);",
															"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
															"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
															"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
															"            pm.expect(err).to.be.null;",
															"            pm.expect(res).to.have.own.property('stream');",
															"            $ = cheerio.load(res.stream.toString('utf8'));",
															"            ",
															"            // Handle Authorization Code parameter",
															"            var authorizationCode = $('input[name=\"Code\"]').val();",
															"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
															"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
															"        ",
															"            // Handle ref_id  parameter",
															"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
															"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
															"            pm.environment.set(\"ascensia_user_two_reference_id\", referenceId);",
															"        });",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "gemail",
															"value": "{{ascensia_user_two_login}}",
															"type": "text"
														},
														{
															"key": "gpassword",
															"value": "{{ascensia_user_two_password}}",
															"type": "text"
														},
														{
															"key": "__RequestVerificationToken",
															"value": "{{ascensia_request_verification_token}}",
															"type": "text"
														},
														{
															"key": "Scope",
															"value": "{{ascensia_valid_scope}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
													"host": [
														"{{ascensia_connect_service_base_url}}"
													],
													"path": [
														"Login",
														"Login"
													],
													"query": [
														{
															"key": "client",
															"value": "{{ascensia_client_name}}"
														},
														{
															"key": "requestId",
															"value": "{{ascensia_request_id}}"
														},
														{
															"key": "lang",
															"value": "{{ascensia_default_language_code}}"
														},
														{
															"key": "Source",
															"value": "{{ascensia_valid_scope}}"
														},
														{
															"key": "CountryCode",
															"value": "{{ascensia_default_country_code}}"
														}
													]
												},
												"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
											},
											"response": []
										},
										{
											"name": "09-2-1-1-03 Get access_token request must succeed after successful authorization",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.unset(\"ascensia_user_two_access_token\");",
															"pm.environment.unset(\"ascensia_user_two_refresh_token\");",
															"pm.environment.unset(\"ascensia_user_two_token_expiry_time\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
															"    pm.response.to.be.ok;",
															"});",
															"pm.test(\"Verify test case #\" + request.name, function () {",
															"    pm.response.to.have.jsonBody();",
															"    ",
															"    var jsonResponse = pm.response.json();",
															"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
															"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
															"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
															"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
															"    ",
															"    pm.environment.set(\"ascensia_user_two_access_token\", jsonResponse.access_token);",
															"    pm.environment.set(\"ascensia_user_two_refresh_token\", jsonResponse.refresh_token);",
															"    console.log(\"Access token will expire after \" + jsonResponse.expires_in + \"ms...\");",
															"    var expiryTime = new Date().getTime() + 1000 * jsonResponse.expires_in;",
															"    pm.environment.set(\"ascensia_user_two_token_expiry_time\", expiryTime);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "code",
															"value": "{{ascensia_authorization_code}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{ascensia_registered_client_id}}"
														},
														{
															"key": "client_secret",
															"value": "{{ascensia_registered_client_secret}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "{{ascensia_auth_grant_type}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "{{ascensia_redirect_uri}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{ascensia_oauth_service_base_url}}/Token",
													"host": [
														"{{ascensia_oauth_service_base_url}}"
													],
													"path": [
														"Token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "09-2-1-3 Get blood glucose data request for user B must fail when using user access_token A",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonRequest = JSON.parse(pm.request.body);",
													"    var jsonResponse = pm.response.json();",
													"    ",
													"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
													"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
													"    }",
													"    ",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
													"    ",
													"    jsonRequest.Users.forEach( expectedUser => {",
													"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
													"        if (actualUser !== undefined) {",
													"            pm.expect(actualUser, \"User\").to.have.property(\"BGData\").that.is.a('array');",
													"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 401);",
													"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\",\"Authorization denied.\");",
													"        }",
													"    });",
													"    ",
													"    // Handle case where the test must be continued",
													"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
													"        pm.environment.set('ascensia_transaction_marker', ",
													"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
													"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
													"        postman.setNextRequest(request.name);",
													"    } else {",
													"        pm.environment.unset('ascensia_transaction_marker', '');",
													"    }",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "client_id",
												"type": "text",
												"value": "{{ascensia_registered_client_id}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{ascensia_user_one_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_two_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
											"host": [
												"{{ascensia_connect_bgdata_service}}"
											],
											"path": [
												"getbgdata"
											],
											"query": [
												{
													"key": "DataSource",
													"value": "Contour"
												},
												{
													"key": "CountryCode",
													"value": "US"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "09-2-1-4 Get blood glucose related data request for user A must fail when using user access_token B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonRequest = JSON.parse(pm.request.body);",
													"    var jsonResponse = pm.response.json();",
													"    ",
													"    if (jsonRequest.hasOwnProperty('TransactionID')) {",
													"        pm.expect(jsonResponse, \"Transaction ID in response must be the same as that in request\").to.have.property(\"TransactionID\", jsonRequest.TransactionID);",
													"    }",
													"    ",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Status\", \"OK\");",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorCode\", 0);",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"ErrorDescription\", \"\");",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Users\").that.is.a('array');",
													"    ",
													"    jsonRequest.Users.forEach( expectedUser => {",
													"        var actualUser = jsonResponse.Users.find(user => { return user.UserKey === expectedUser.UserKey});",
													"        if (actualUser !== undefined) {",
													"            pm.expect(actualUser, \"User\").to.have.property(\"BGRelatedData\").that.is.a('array');",
													"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorCode\", 401);",
													"            pm.expect(actualUser, \"User\").to.have.property(\"ErrorDescription\",\"Authorization denied.\");",
													"        }",
													"    });",
													"    ",
													"    // Handle case where the test must be continued",
													"    if (/*jsonResponse.TransactionID !== \"\" && */jsonResponse.ContinuationToken > 0) {",
													"        pm.environment.set('ascensia_transaction_marker', ",
													"            '\"TransactionID\":\"' + jsonResponse.TransactionID + '\",' +",
													"            '\"ContinuationToken\":\"' + jsonResponse.ContinuationToken + '\",');",
													"        postman.setNextRequest(request.name);",
													"    } else {",
													"        pm.environment.unset('ascensia_transaction_marker', '');",
													"    }",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "client_id",
												"type": "text",
												"value": "{{ascensia_registered_client_id}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{ascensia_user_two_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_one_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
											"host": [
												"{{ascensia_connect_bgdata_service}}"
											],
											"path": [
												"getbgrelateddata"
											],
											"query": [
												{
													"key": "DataSource",
													"value": "Contour"
												},
												{
													"key": "CountryCode",
													"value": "US"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This test verifies that the service rejects attempts to read user B's data using the access token of another user A. ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.environment.unset(\"ascensia_transaction_marker\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "09-2-2 Partner Access token Misuse Test",
							"item": [
								{
									"name": "09-2-2-01 Get client access_token request must succeed for partner A",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_partner_one_access_token\");",
													"pm.environment.unset(\"ascensia_partner_one_refresh_token\");",
													"pm.environment.unset(\"ascensia_partner_one_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_partner_one_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_partner_one_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_partner_one_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "09-2-2-02 Get client access_token request must succeed for partner B",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_partner_two_access_token\");",
													"pm.environment.unset(\"ascensia_partner_two_refresh_token\");",
													"pm.environment.unset(\"ascensia_partner_two_token_expiry_time\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that status code is HTTP.OK (200)\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonResponse = pm.response.json();",
													"    pm.expect(jsonResponse, \"Access token\").to.have.own.property('access_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Refresh token\").to.have.own.property('refresh_token').to.be.a('string');",
													"    pm.expect(jsonResponse, \"Expiry duration\").to.have.own.property('expires_in').to.be.a('number');",
													"    pm.expect(jsonResponse, \"Token type\").to.have.own.property('token_type', 'bearer');",
													"    ",
													"    pm.environment.set(\"ascensia_partner_two_access_token\", jsonResponse.access_token);",
													"    pm.environment.set(\"ascensia_partner_two_refresh_token\", jsonResponse.refresh_token);",
													"    var expiryTime = new Date(new Date().getTime() + 1000 * jsonResponse.expires_in);",
													"    pm.environment.set(\"ascensia_partner_two_token_expiry_time\", expiryTime);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_two_id}}"
												},
												{
													"key": "client_secret",
													"value": "{{ascensia_registered_client_two_secret}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Token",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Token"
											]
										}
									},
									"response": []
								},
								{
									"name": "09-2-2-03 Get blood glucose data request for users A & B must fail when using partner access_token B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonRequest = JSON.parse(pm.request.body);",
													"    var jsonResponse = pm.response.json();",
													"    ",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Authorization denied for request. error code : Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "client_id",
												"type": "text",
												"value": "{{ascensia_registered_client_id}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{ascensia_partner_two_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_one_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    \t},\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_two_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    \t}\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ascensia_connect_bgdata_service}}/getbgdata?DataSource=Contour&CountryCode=US",
											"host": [
												"{{ascensia_connect_bgdata_service}}"
											],
											"path": [
												"getbgdata"
											],
											"query": [
												{
													"key": "DataSource",
													"value": "Contour"
												},
												{
													"key": "CountryCode",
													"value": "US"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "09-2-2-04 Get blood glucose related data request for users A & B must fail when using partner access_token B",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify test case #\" + request.name, function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.have.jsonBody();",
													"    ",
													"    var jsonRequest = JSON.parse(pm.request.body);",
													"    var jsonResponse = pm.response.json();",
													"    ",
													"    pm.expect(jsonResponse, \"Response\").to.have.property(\"Message\", \"Authorization denied for request. error code : Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "client_id",
												"type": "text",
												"value": "{{ascensia_registered_client_id}}"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{ascensia_partner_two_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t{{ascensia_transaction_marker}}\r\n\t\"Users\": [\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_one_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    \t},\r\n\t\t{\r\n\t\t\t\"UserKey\": \"{{ascensia_user_two_reference_id}}\",\r\n    \t\t\"StartDate\": \"{{ascensia_start_date}}\",\r\n\t\t\t\"EndDate\": \"{{ascensia_end_date}}\",\r\n\t\t\t\"StartId\": null,\r\n\t\t\t\"EndId\": null\r\n    \t}\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{ascensia_connect_bgdata_service}}/getbgrelateddata?DataSource=Contour&CountryCode=US",
											"host": [
												"{{ascensia_connect_bgdata_service}}"
											],
											"path": [
												"getbgrelateddata"
											],
											"query": [
												{
													"key": "DataSource",
													"value": "Contour"
												},
												{
													"key": "CountryCode",
													"value": "US"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This test verifies that the service rejects attempts to read user data using the access token of another partner. ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "09-2-7 Buffer Overflow Exploit Test",
							"item": [
								{
									"name": "09-2-7-01 User authorization request must succeed with valid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is HTTP 200 (OK) with an HTML consent page that includes a login form\", function () {",
													"    pm.response.to.be.ok",
													"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
													"    ",
													"    const cheerio = require('cheerio');",
													"    const $ = cheerio.load(responseBody);",
													"    ",
													"    // Extract request verification token",
													"    const sdk = require('postman-collection');",
													"    var actionUrl = new sdk.Url($('form').attr('action'));",
													"    ",
													"    var clientParameter = actionUrl.query.find(entry => {return entry.key === 'client'});",
													"    pm.expect(clientParameter, \"Action url must include a client parameter\").is.a('object');",
													"    var clientName = clientParameter.value;",
													"    pm.environment.set(\"ascensia_client_name\", clientName);",
													"    ",
													"    var requestIdParameter = actionUrl.query.find(entry => {return entry.key === 'requestId'});",
													"    pm.expect(requestIdParameter, \"Action url must include a requestId parameter\").is.a('object');",
													"    var requestId = requestIdParameter.value;",
													"    pm.environment.set(\"ascensia_request_id\", requestId);",
													"    ",
													"    // Extract request verification token",
													"    var inputElement = $('input[name=\"__RequestVerificationToken\"]');",
													"    pm.expect(inputElement, \"Form must include __RequestVerificationToken input element\").is.a('object');",
													"    var requestVerificationToken = inputElement.val();",
													"    pm.environment.set(\"ascensia_request_verification_token\", requestVerificationToken);",
													"});",
													"",
													"if (!pm.variables.get(\"ascensia_client_name\") ||",
													"    !pm.variables.get(\"ascensia_request_id\") ||",
													"    !pm.variables.get(\"ascensia_request_verification_token\")) {",
													"        console.log(\"Skipping login request..\");",
													"        postman.setNextRequest(null);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");",
													"",
													"var state = \"\";",
													"for (var i = 0; i < 46; ++i) {",
													"    state += Math.random().toString(32).split('.')[1]",
													"}",
													"pm.environment.set(\"ascensia_long_state\", state);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_long_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_long_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
									},
									"response": []
								},
								{
									"name": "09-2-7-02 User authorization must succeed with valid login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that a successful response is recieved with the authorization code\", function () {",
													"pm.environment.get(\"variable_key\");    pm.response.to.be.ok;",
													"    ",
													"    var contentType = pm.response.headers.find(entry => { return entry.key === 'Content-Type'});",
													"    if (typeof(contentType) === 'object' && contentType.value === 'application/json; charset=utf-8') {",
													"        // Extract authorization code from JSON response.",
													"        pm.response.to.have.jsonBody();",
													"    ",
													"        var jsonResponse = pm.response.json();",
													"        ",
													"        // Handle Authorization Code parameter",
													"        pm.expect(jsonResponse.args, \"Authorization code\").to.have.own.property('code');",
													"        var authorizationCode = jsonResponse.args.code;",
													"        pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"        ",
													"        // Handle ref_id  parameter",
													"        pm.expect(jsonResponse.args, \"Reference Id\").to.have.own.property('reference_id');",
													"        var referenceId = jsonResponse.args.reference_id;",
													"        pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"        pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"    } else {",
													"        // Handle the case the callback handler shows a temporary refresh page.",
													"        const cheerio = require('cheerio');",
													"        var $ = cheerio.load(responseBody);",
													"        var baseUrl = pm.environment.get(\"ascensia_service_base_url\"); ",
													"        var refreshUrl = $('meta[http-equiv=\"refresh\"]').attr('content').substring(3);",
													"        pm.sendRequest(baseUrl + refreshUrl, function (err, res) {",
													"            pm.expect(err).to.be.null;",
													"            pm.expect(res).to.have.own.property('stream');",
													"            $ = cheerio.load(res.stream.toString('utf8'));",
													"            ",
													"            // Handle Authorization Code parameter",
													"            var authorizationCode = $('input[name=\"Code\"]').val();",
													"            pm.expect(authorizationCode, \"Authorization code\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_authorization_code\", authorizationCode);",
													"        ",
													"            // Handle ref_id  parameter",
													"            var referenceId = $('input[name=\"ReferenceId\"]').val();",
													"            pm.expect(referenceId, \"Reference Id\").to.a('string').that.is.not.empty;",
													"            pm.environment.set(\"ascensia_user_reference_id\", referenceId);",
													"        });",
													"    }",
													"});",
													"pm.environment.unset(\"variable_key\");",
													"pm.globals.set(\"variable_key\", \"variable_value\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "gemail",
													"value": "{{ascensia_user_login}}",
													"type": "text"
												},
												{
													"key": "gpassword",
													"value": "{{ascensia_user_password}}",
													"type": "text"
												},
												{
													"key": "__RequestVerificationToken",
													"value": "{{ascensia_request_verification_token}}",
													"type": "text"
												},
												{
													"key": "Scope",
													"value": "{{ascensia_valid_scope}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ascensia_connect_service_base_url}}/Login/Login?client={{ascensia_client_name}}&requestId={{ascensia_request_id}}&lang={{ascensia_default_language_code}}&Source={{ascensia_valid_scope}}&CountryCode={{ascensia_default_country_code}}",
											"host": [
												"{{ascensia_connect_service_base_url}}"
											],
											"path": [
												"Login",
												"Login"
											],
											"query": [
												{
													"key": "client",
													"value": "{{ascensia_client_name}}"
												},
												{
													"key": "requestId",
													"value": "{{ascensia_request_id}}"
												},
												{
													"key": "lang",
													"value": "{{ascensia_default_language_code}}"
												},
												{
													"key": "Source",
													"value": "{{ascensia_valid_scope}}"
												},
												{
													"key": "CountryCode",
													"value": "{{ascensia_default_country_code}}"
												}
											]
										},
										"description": "Upon recieving a successful response to authorization request, this test will submit a login request to complete the authorization request. The service is expected to redirect the response to the redirect_uri, which in turn may send a JSON response directly with the authorization code (if the redirect_uri is Postman echo service), or show refresh page (if the redirect_uri is a test cloud page). In either case, the test will extract and save the authorization code."
									},
									"response": []
								}
							],
							"description": "This test verifies that the service does not crash and rejects requests with really long query/post parameter values."
						},
						{
							"name": "09-2-8 Malformed Content Exploit Test",
							"item": [
								{
									"name": "09-2-8-01 User authorization request must fail if the request includes a file upload",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that response is not HTTP 200 (OK)\", function () {",
													"    pm.response.to.be.not.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.unset(\"ascensia_client_name\");",
													"pm.environment.unset(\"ascensia_request_id\");",
													"pm.environment.unset(\"ascensia_request_verification_token\");",
													"",
													"var state = \"\";",
													"for (var i = 0; i < 32; ++i) {",
													"    state += Math.random().toString(32).split('.')[1]",
													"}",
													"pm.environment.set(\"ascensia_long_state\", state);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {}
										},
										"url": {
											"raw": "{{ascensia_oauth_service_base_url}}/Authorize?client_id={{ascensia_registered_client_id}}&response_type={{ascensia_valid_response_type}}&scope={{ascensia_valid_scope}}&state={{ascensia_long_state}}&language_code={{ascensia_default_language_code}}&country_code={{ascensia_default_country_code}}&redirect_uri={{ascensia_redirect_uri}}",
											"host": [
												"{{ascensia_oauth_service_base_url}}"
											],
											"path": [
												"Authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{ascensia_registered_client_id}}",
													"description": "Identifies the client that is making the request. The value passed in this parameter must exactly match the value provided by Ascensia Connect during registration."
												},
												{
													"key": "response_type",
													"value": "{{ascensia_valid_response_type}}",
													"description": "Ascensia Connect API V1 provides only the OAuth 2.0 grant type - Authorization Code Grant. Hence the default value."
												},
												{
													"key": "scope",
													"value": "{{ascensia_valid_scope}}",
													"description": "Ascensia Connect API V1 has the scope to provide the 3rd party partner with user BG readings. The default value is Usrprofile_bgdata."
												},
												{
													"key": "state",
													"value": "{{ascensia_long_state}}",
													"description": "Should be in request, can be left blank"
												},
												{
													"key": "language_code",
													"value": "{{ascensia_default_language_code}}",
													"description": "As defined in the ISO specification, provide the user’s language code, to display suitable Authorization Page."
												},
												{
													"key": "country_code",
													"value": "{{ascensia_default_country_code}}",
													"description": "As defined in the ISO specification, provide the user’s country code, to display suitable Authorization Page."
												},
												{
													"key": "redirect_uri",
													"value": "{{ascensia_redirect_uri}}",
													"description": "Determines the client URI Authorization code would be sent to. The value of this parameter must exactly the values provided to Ascensia Connect during registration."
												}
											]
										},
										"description": "This test verifies that the /Authorize endpoint sends a HTML consent page with a login form in response to a valid authorization request and extracts the necessary input values for the login request. If the test fails, then login request will be skipped."
									},
									"response": []
								}
							],
							"description": "This test verifies that the service does not crash and rejects requests with unexpected POST body, such as requests formatted in multipart/form-data containing a large file upload."
						}
					]
				}
			],
			"description": "Web services typically expect HTTP requests to be formatted in a specific HTTP method such as GET or POST or the input to be formatted in a specific Content-Type such as application/json. The tests in this section will send HTTP requests that are malformed intentionally to verify that the service will handle them gracefully."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var moment = require('moment');",
					"var today = moment.utc();",
					"pm.variables.set(\"ascensia_end_date\", today.format(\"YYYY-MM-DD HH:mm:ss\"));",
					"today.subtract(365, 'day');",
					"pm.variables.set(\"ascensia_start_date\", today.format(\"YYYY-MM-DD\"));",
					"pm.globals.set(\"ascensia_transactionid_length\", 36);  ",
					"pm.globals.set(\"ascensia_meter_id_hash_length\", 72);",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let max_response_time_ms = parseInt(pm.variables.get(\"ascensia_max_response_time_ms\"));",
					"pm.test(\"Verify that the response time is less than \" + max_response_time_ms + \"ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(max_response_time_ms);",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ascensia_max_response_time_ms",
			"value": "8000",
			"type": "string"
		},
		{
			"key": "ascensia_valid_scope",
			"value": "Contour",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_scope",
			"value": "invalid_scope",
			"type": "string"
		},
		{
			"key": "ascensia_default_language_code",
			"value": "en",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_language_code",
			"value": "zzzz",
			"type": "string"
		},
		{
			"key": "ascensia_default_country_code",
			"value": "US",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_countrycode",
			"value": "ZZZZ",
			"type": "string"
		},
		{
			"key": "ascensia_valid_response_type",
			"value": "code",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_response_type",
			"value": "unsupported_response_type",
			"type": "string"
		},
		{
			"key": "ascensia_random_state",
			"value": "state_{{$randomInt}}",
			"type": "string"
		},
		{
			"key": "ascensia_unregistered_client_id",
			"value": "unregistered_test_client",
			"type": "string"
		},
		{
			"key": "ascensia_auth_grant_type",
			"value": "authorization_code",
			"type": "string"
		},
		{
			"key": "ascensia_refresh_grant_type",
			"value": "refresh_token",
			"type": "string"
		},
		{
			"key": "access_token_type",
			"value": "access_token",
			"type": "string"
		},
		{
			"key": "refresh_token_type",
			"value": "refresh_token",
			"type": "string"
		},
		{
			"key": "mock_service_base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "ascensia_authorization_code",
			"value": "",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_grant_type",
			"value": "invalid_grant_type",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_redirect_uri",
			"value": "http://invalid.redirect.uri",
			"type": "string"
		},
		{
			"key": "ascensia_invalid_authorization_code",
			"value": "invalid_authorization_code",
			"type": "string"
		},
		{
			"key": "ascensia_transaction_marker",
			"value": "",
			"type": "string"
		}
	]
}